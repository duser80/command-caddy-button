
import { useState, useRef } from "react";
import { Check, Copy } from "lucide-react";
import { toast } from "sonner";

interface Command {
  command: string;
  description: string;
  category: string;
}

const Index = () => {
  const [searchTerm, setSearchTerm] = useState("");
  const [activeCategory, setActiveCategory] = useState<string | null>(null);
  const [copiedCommand, setCopiedCommand] = useState<string | null>(null);

  const commands: Command[] = [
    {
      command: "react-native init [projectName]",
      description: "Initializes a new React Native project with the specified name.",
      category: "Project Creation"
    },
    {
      command: "react-native run-android",
      description: "Builds your React Native project and runs it on an Android emulator or connected device.",
      category: "Running"
    },
    {
      command: "react-native run-ios",
      description: "Builds your React Native project and runs it on the iOS Simulator or a connected iOS device.",
      category: "Running"
    },
    {
      command: "react-native start",
      description: "Starts the Metro bundler, which is responsible for bundling your JavaScript code.",
      category: "Development"
    },
    {
      command: "react-native bundle",
      description: "Bundles the JavaScript code for release.",
      category: "Bundling"
    },
    {
      command: "react-native link",
      description: "Links assets and native modules in your project.",
      category: "Project Management"
    },
    {
      command: "react-native eject",
      description: "Ejects from the Expo-managed workflow to the bare React Native workflow.",
      category: "Project Management"
    },
    {
      command: "react-native log-android",
      description: "Starts logging for Android.",
      category: "Logging"
    },
    {
      command: "react-native log-ios",
      description: "Starts logging for iOS.",
      category: "Logging"
    },
    {
      command: "react-native unlink",
      description: "Unlinks assets and native modules in your project.",
      category: "Project Management"
    },
    {
      command: "react-native upgrade",
      description: "Upgrades your React Native project to a new version.",
      category: "Project Management"
    },
    {
      command: "react-native info",
      description: "Displays useful information about your React Native environment.",
      category: "Information"
    },
    {
      command: "react-native doctor",
      description: "Helps diagnose common issues with your React Native setup.",
      category: "Troubleshooting"
    },
    {
      command: "react-native run-commands",
      description: "Runs custom commands defined in your project's package.json.",
      category: "Custom Commands"
    },
    {
      command: "react-native bundle-cmd",
      description: "Bundles the JavaScript code using a custom command specified in your project's package.json.",
      category: "Bundling"
    },
    {
      command: "react-native clean-project",
      description: "Cleans the build artifacts and dependencies in your React Native project. This command is useful for resolving build-related issues or starting with a clean slate.",
      category: "Troubleshooting"
    },
    {
      command: "react-native bundle-analyzer",
      description: "Analyzes the JavaScript bundle generated by React Native. It helps identify large dependencies or unnecessary code that can be optimized to improve performance and reduce bundle size.",
      category: "Optimization"
    },
    {
      command: "react-native run-ios --configuration <configuration>",
      description: "Builds your React Native project with a specific configuration for iOS. This command allows you to specify different build configurations (e.g., Debug, Release) when running your app on an iOS device or simulator.",
      category: "Running"
    },
    {
      command: "react-native run-android --variant <variant>",
      description: "Builds your React Native project with a specific variant for Android. This command enables you to specify different build variants (e.g., debug, release) when running your app on an Android device or emulator.",
      category: "Running"
    },
    {
      command: "react-native start --reset-cache",
      description: "Starts the Metro bundler with cache reset. This command is useful when you encounter issues related to the Metro bundler's cache, such as stale or outdated cache causing unexpected behavior.",
      category: "Troubleshooting"
    },
    {
      command: "react-native run-ios --simulator \"<device name>\"",
      description: "Runs your React Native app on a specific iOS simulator device. You can specify the device name, such as \"iPhone 11\", to target a specific iOS device simulator.",
      category: "Running"
    },
    {
      command: "react-native run-android --deviceId <device ID>",
      description: "Runs your React Native app on a specific Android device identified by its device ID. This command is useful when you have multiple Android devices connected, and you want to specify which device to deploy the app to.",
      category: "Running"
    },
    {
      command: "react-native bundle --entry-file <entryFile> --platform <platform> --dev <dev> --bundle-output <bundleOutput> --assets-dest <assetsDest>",
      description: "Allows customizing the bundling process by specifying various options such as entry file, target platform, development mode, bundle output path, and assets destination.",
      category: "Bundling"
    },
    {
      command: "react-native eject --platform <platform>",
      description: "Ejects your React Native project to the bare workflow for a specific platform, either iOS or Android. This command is useful if you need to customize native code or configurations specific to one platform while keeping the other platform managed.",
      category: "Project Management"
    },
    {
      command: "react-native upgrade --legacy true",
      description: "Upgrades a legacy React Native project to the latest version. This command helps migrate older React Native projects to newer versions by updating dependencies and configurations.",
      category: "Project Management"
    },
    {
      command: "react-native link <packageName>",
      description: "Links a specific native dependency package to your React Native project. This command is useful when adding new native modules or libraries that require linking to native code.",
      category: "Project Management"
    },
    {
      command: "react-native start --port <portNumber>",
      description: "Starts the Metro bundler on a specific port. This command is useful when you need to run multiple Metro bundlers simultaneously or when the default port is already in use.",
      category: "Development"
    },
    {
      command: "react-native run-ios --configuration <configuration> --scheme <scheme>",
      description: "Builds your React Native project with a specific configuration and scheme for iOS. This command allows you to specify different build schemes defined in your Xcode project.",
      category: "Running"
    },
    {
      command: "react-native run-android --variant <variant> --appId <applicationId>",
      description: "Builds your React Native project with a specific variant and application ID for Android. This command allows you to specify different build variants and application IDs defined in your Gradle configuration.",
      category: "Running"
    },
    {
      command: "react-native bundle --platform <platform> --assets-dest <assetsDest> --dev false --entry-file <entryFile> --bundle-output <bundleOutput>",
      description: "Bundles the JavaScript code for release with production optimizations. This command is typically used when preparing the JavaScript bundle for deployment to app stores.",
      category: "Bundling"
    },
    {
      command: "react-native clean-project --platform <platform>",
      description: "Cleans the build artifacts and dependencies for a specific platform, either iOS or Android. This command is useful for performing a clean build and resolving any build-related issues specific to a platform.",
      category: "Troubleshooting"
    },
    {
      command: "react-native bundle-analyzer --platform <platform> --assets-dest <assetsDest>",
      description: "Analyzes the JavaScript bundle size and dependencies for a specific platform. This command helps identify opportunities for optimizing bundle size and improving app performance.",
      category: "Optimization"
    },
    {
      command: "react-native log-ios --device <deviceName>",
      description: "Starts logging for iOS on a specific device. This command allows you to view logs specific to your React Native app running on a physical iOS device identified by its name.",
      category: "Logging"
    },
    {
      command: "react-native log-android --device <deviceId>",
      description: "Starts logging for Android on a specific device. This command allows you to view logs specific to your React Native app running on a physical or virtual Android device identified by its device ID.",
      category: "Logging"
    },
    {
      command: "react-native bundle --platform <platform> --dev <dev> --entry-file <entryFile> --bundle-output <bundleOutput> --sourcemap-output <sourcemapOutput> --assets-dest <assetsDest>",
      description: "Bundles the JavaScript code along with source maps. Source maps are useful for debugging JavaScript code in production by mapping it back to the original source files.",
      category: "Bundling"
    },
    {
      command: "react-native start --reset-cache --reset-hard",
      description: "Starts the Metro bundler with a hard cache reset. This command clears all Metro caches, including the React Native packager cache and watchman watch list, ensuring a clean start for the bundler.",
      category: "Troubleshooting"
    },
    {
      command: "react-native upgrade --version <version>",
      description: "Upgrades your React Native project to a specific version. This command enables you to upgrade your project to a particular version of React Native, including major, minor, or patch versions.",
      category: "Project Management"
    },
    {
      command: "react-native --version / react-native -v",
      description: "To check the version of React Native installed in your development environment.",
      category: "Information"
    }
  ];

  const categories = Array.from(new Set(commands.map(cmd => cmd.category))).sort();

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
    setCopiedCommand(text);
    toast.success("Command copied to clipboard!");
    
    setTimeout(() => {
      setCopiedCommand(null);
    }, 2000);
  };

  const filteredCommands = commands.filter(command => {
    const matchesSearch = command.command.toLowerCase().includes(searchTerm.toLowerCase()) || 
                           command.description.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesCategory = activeCategory ? command.category === activeCategory : true;
    return matchesSearch && matchesCategory;
  });

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-gray-100 px-4 py-12">
      <div className="max-w-5xl mx-auto">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-900 mb-2">React Native CLI Commands</h1>
          <p className="text-lg text-gray-600 max-w-2xl mx-auto">
            A comprehensive list of useful commands for React Native development.
          </p>
        </div>

        <div className="mb-8 flex flex-col md:flex-row gap-4">
          <div className="w-full md:w-2/3">
            <div className="relative">
              <input
                type="text"
                placeholder="Search commands..."
                className="w-full p-3 pl-4 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-transparent transition-all duration-200"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
              />
              <div className="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none text-gray-400">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
                  <path strokeLinecap="round" strokeLinejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
                </svg>
              </div>
            </div>
          </div>

          <div className="w-full md:w-1/3">
            <select
              className="w-full p-3 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-gray-400 focus:border-transparent transition-all duration-200"
              value={activeCategory || ""}
              onChange={(e) => setActiveCategory(e.target.value || null)}
            >
              <option value="">All Categories</option>
              {categories.map(category => (
                <option key={category} value={category}>{category}</option>
              ))}
            </select>
          </div>
        </div>

        <div className="grid gap-6">
          {filteredCommands.length > 0 ? (
            filteredCommands.map((cmd, index) => (
              <div 
                key={index} 
                className="bg-white rounded-lg overflow-hidden shadow-md border border-gray-200 hover:shadow-lg transition-shadow duration-300"
              >
                <div className="p-6">
                  <div className="flex items-center justify-between mb-2">
                    <span className="text-sm font-medium px-3 py-1 bg-gray-100 text-gray-700 rounded-full">{cmd.category}</span>
                    <button
                      onClick={() => copyToClipboard(cmd.command)}
                      className="p-2 text-gray-500 hover:text-gray-700 focus:outline-none transition-colors duration-200"
                      aria-label="Copy command"
                    >
                      {copiedCommand === cmd.command ? (
                        <Check className="h-5 w-5 text-green-500" />
                      ) : (
                        <Copy className="h-5 w-5" />
                      )}
                    </button>
                  </div>
                  <div className="mt-4">
                    <pre className="bg-gray-50 p-4 rounded-md overflow-x-auto text-sm font-mono text-gray-800 border border-gray-200">
                      {cmd.command}
                    </pre>
                  </div>
                  <p className="mt-4 text-gray-700">{cmd.description}</p>
                </div>
              </div>
            ))
          ) : (
            <div className="text-center py-16 bg-white rounded-lg shadow-md">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-16 h-16 mx-auto text-gray-400 mb-4">
                <path strokeLinecap="round" strokeLinejoin="round" d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z" />
              </svg>
              <h3 className="text-lg font-medium text-gray-900 mb-2">No commands found</h3>
              <p className="text-gray-600">Try adjusting your search or filter to find what you're looking for.</p>
            </div>
          )}
        </div>

        <div className="mt-12 text-center text-sm text-gray-500">
          <p>These commands are for the React Native CLI. Make sure you have React Native installed in your development environment.</p>
        </div>
      </div>
    </div>
  );
};

export default Index;
